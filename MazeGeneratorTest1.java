import static org.junit.Assert.assertEquals;

import java.io.*;

import org.junit.Assert;
import org.junit.jupiter.api.Test;

/**
 * Tests if the maze generated, BFS solution, and DFS solution of MazeGenerator is correct by comparing it to an expected result 
 * @author Dale Christian Seen and Konstantin Dimitrov
 *
 */
public class MazeGeneratorTest1 {

	@Test
	void test() 
	{
		try
		{
			final String EXPECTED_FILE_OUTPUT = "expected.txt";			//	Name of .txt file containing the expected solutions
			final String ACTUAL_FILE_OUTPUT = "program.txt";			//	Name of .txt file containing the solution generated by the program
			
			// Create Writer object
			BufferedWriter out = new BufferedWriter(new FileWriter(ACTUAL_FILE_OUTPUT));
			
			// Create 3 MazeGenerator Objects of sizes 4, 6, and 8
			MazeGenerator maze1 = new MazeGenerator(4);
			MazeGenerator maze2 = new MazeGenerator(6);
			MazeGenerator maze3 = new MazeGenerator(8);
			
			// Generate the results of maze generation, BFS and DFS then writes them into program.txt file.
			generateAndWriteResult(maze1, out);
			generateAndWriteResult(maze2, out);
			generateAndWriteResult(maze3, out);
			
			out.close();
			
			// Compare Generated ASCII.txt file and compare it with 'expected.txt' which contains the expected result
			BufferedReader Out = new BufferedReader(new FileReader(ACTUAL_FILE_OUTPUT));
			BufferedReader In = new BufferedReader(new FileReader(EXPECTED_FILE_OUTPUT));
			
			String expectedLine = "";
			while ((expectedLine = In.readLine()) != null)
			{
				String actualLine = Out.readLine();
				assertEquals(expectedLine, actualLine);
			}
		}
		catch (Exception fail)
		{
			Assert.fail();
		}
	}
	
	/**
	 * Writes the results of a MazeGenerator into a .txt file
	 * @param aMaze Maze that will generate result
	 * @param out BufferedWriter object that will write result into .txt file
	 */
	void generateAndWriteResult(MazeGenerator aMaze, BufferedWriter out)
	{
		try
		{
			out.write("Graph Size: " + aMaze.getDimension());
			out.newLine();
			out.write("MAZE:");
			out.newLine();
			aMaze.generateMaze();
			String initialMaze = aMaze.toStringInitialMaze() + "\r\n";
			out.write(initialMaze);
			aMaze.solveMazeBFS();
			String bfs = aMaze.toStringOrderMaze() + "\r\n";
			out.write("BFS:\r\n");
			out.write(bfs);
			String bfsSolution = aMaze.toStringSolvedMaze() + "\r\n";
			out.write(bfsSolution);
			aMaze.reset();
			aMaze.solveMazeDFS();
			String dfs = aMaze.toStringOrderMaze() + "\r\n";
			out.write("DFS:\r\n");
			out.write(dfs);
			String dfsSolution = aMaze.toStringSolvedMaze();
			out.write(dfsSolution);
			out.write("======================\r\n");
			out.write("  Program Completed!  \r\n");
			out.write("======================\r\n");
		}
		catch (Exception event)
		{
			Assert.fail();
		}
	}
}
